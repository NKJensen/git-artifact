#!/bin/bash
#
# git-artifact: use a git repository as artifact management storage
#

if test -z "$GIT_EXEC_PATH" || ! test -f "$GIT_EXEC_PATH/git-sh-setup" || {
	test "${PATH#"${GIT_EXEC_PATH}:"}" = "$PATH" &&
	test ! "$GIT_EXEC_PATH" -ef "${PATH%%:*}" 2>/dev/null
}
then
	basename=${0##*[/\\]}
	echo >&2 'It looks like either your git installation or your'
	echo >&2 'git-subtree installation is broken.'
	echo >&2
	echo >&2 "Tips:"
	echo >&2 " - If \`git --exec-path\` does not print the correct path to"
	echo >&2 "   your git install directory, then set the GIT_EXEC_PATH"
	echo >&2 "   environment variable to the correct directory."
	echo >&2 " - Make sure that your \`$basename\` file is either in your"
	echo >&2 "   PATH or in your git exec path (\`$(git --exec-path)\`)."
	echo >&2 " - You should run git-subtree as \`git ${basename#git-}\`,"
	echo >&2 "   not as \`$basename\`." >&2
	exit 126
fi

#inspiration: https://github.com/git/git/blob/master/contrib/subtree/git-subtree.sh
OPTS_SPEC="\
	git artifact commmand <options>

commands:

init			inititialize a new repository
clone			clone and existing repository from the remote
add-n-tag		add and commit files to repo
push-tag		push a tag
add-n-push		add and commit files to repo and then push them
--
h,help        show the help
q             quiet
d             show debug messages

 options for 'init' and 'clone'
u,url=        the remote url
p,path=       the optional path for init and clone 

 options for 'init', 'clone', 'add-n-tag', 'push-tag', 'add-n-push'
b,branch=     use branch for local changes and pushes

 options for 'add-n-tag', 'push-tag', 'add-n-push'
t,tag=         the tag to be created
"

debug () {
	if test -n "$arg_debug"
	then
		printf "%s%s\n" '' "$*" >&2
	fi
}


set_repo_dir() {
	local -n _ref_dir=${1}
	if [[ $arg_path != ""  ]]; then
		_ref_dir=$arg_path
	else		
		_ref_dir=$(basename "$arg_remoteurl" | sed -e 's/\.git//g' )
	fi
	if [[ -d ${_ref_dir} ]]; then 
		echo "ERROR: Directory '${_ref_dir}' already exists"
		exit 1
	fi

}

set_base_branch() {
	local -n _ref_base_branch=${1}
	if git config --global init.defaultBranch ; then 
		_ref_base_branch=$(git config --global init.defaultBranch)
		echo "INFO: Using init.defaultBranch $_ref_base_branch as the base branch"
	else
		_ref_base_branch="main"
		echo "INFO: Using git default branch: $_ref_base_branch as the base branch"
	fi

}

cmd_init() {
	local _dir=
	set_repo_dir _dir
	
	local _base_branch=
	set_base_branch _base_branch

	git init -b "${_base_branch}" "$_dir" 
	cd "$_dir"
	git remote add origin "$arg_remoteurl"
	git config --local remote.origin.fetch "+refs/heads/${_base_branch}:refs/remotes/origin/${_base_branch}"
	mkdir .gitartifact
	touch .gitartifact/config .gitignore .gitattributes
	{ 
		echo "# Add git artifact repo description and instructions here" 
		echo ""
		echo ".. based on the tool: https://github.com/Praqma/git-artifact.git" 
	} > README.md
	git add .
	git commit -m "First commit using command: git artifact repo $arg_remoteurl init"
	git push origin "HEAD:refs/heads/${_base_branch}" -f

	if [[ -n ${arg_branch:-} ]]; then
		echo "INFO: Init branch: ${arg_branch}"
		git checkout -b "${arg_branch}"
		git branch "${arg_branch}" --set-upstream-to "origin/${_base_branch}"
	fi

	git branch -v

	echo "Ready to receive artifacts.. directory: $_dir"
}

cmd_clone() {

	local _dir=
	set_repo_dir _dir
	
	local _base_branch=
	set_base_branch _base_branch

 	git clone --single-branch --branch "$_base_branch" "$arg_remoteurl" "${_dir}"
	cd "${_dir}"

	if [[ -e ./setup.sh ]]; then
		echo "Setup file exists - source it"   
		# shellcheck source=/dev/null
		. ./setup.sh
	else
		echo "INFO: Setup file (setup.sh) does not exit - skip"
	fi

	if [[ -n ${arg_branch:-} ]]; then
		echo "INFO: Init branch: ${arg_branch}"
		git checkout -b "${arg_branch}"
		git branch "${arg_branch}" --set-upstream-to "origin/${_base_branch}"
	fi

	git branch -v

	echo "Ready to receive artifacts.."
}

cmd_add-new-artifact() {
	echo "Add artifacts"
	git add -A .

	echo "Commit the artifacts"
	git commit -q -m "$arg_artifacttag"

	echo "Tagging the artifacts: $arg_artifacttag"
	git tag -a -m "$arg_artifacttag" "$arg_artifacttag"

}

cmd_push-artifact(){
	local _current_branch
	_current_branch=$(git branch --show-current)

	echo "Push the tag"
	git push origin refs/tags/"${arg_artifacttag}":refs/tags/"${arg_artifacttag}" -f

	if [[ -n ${arg_branch:-} ]]; then
		echo "Push the branch using force"
		git push origin -f HEAD:refs/heads/"${_current_branch}" || {
			echo "Force push failed.. try delete and push"
			git push origin :refs/heads/"${_current_branch}"
			git push origin HEAD:refs/heads/"${_current_branch}"
		} || {
			die "ERROR: Try to pushing with force / delete + push failed - Talk to your favorite DevOps geek to use this option"
		}
		git fetch origin +refs/heads/"${_current_branch}":refs/remotes/origin/"${_current_branch}"
	fi

	git log -2 --oneline --decorate --graph

	echo "All good.. get back to clear state for next artifact..."
	
	local _base_branch=
	set_base_branch _base_branch
	
	git reset --hard origin/"${_base_branch}"
	git clean -xfd 
}

cmd_add-n-push() {
	cmd_add-new-artifact
	cmd_push-artifact
}

main () {
	[[ ${debug:-} == true ]] && set -x
	if [[ $# -eq 0 ]] ; then
		set -- -h
	fi
	set_args="$(echo "$OPTS_SPEC" | git rev-parse --parseopt -- "$@" || echo exit $?)"
	# Set the arguments array for "real" flag parsing.
	eval "$set_args"
	# Begin "real" flag parsing.
	arg_debug=
	arg_artifacttag=
	arg_branch=
	arg_path=
	while test $# -gt 1
	do
		opt="$1" # command
		shift

		case "$opt" in
		-q)
			GIT_QUIET=1
			;;
		-d)
			arg_debug=1
			;;
		--url|-u)
			arg_remoteurl="$1"
			shift
			;;
		--branch|-b)
			arg_branch="$1"
			shift
			;;
		--tag|-t)
			arg_artifacttag="$1"
			shift
			;;
		--path|-p)
			arg_path="$1"
			shift
			;;
		--)
			;;
		*)
			echo "Unexpected option: $opt"
			exit 1
			;;
		esac
	done
	arg_command=$1
	shift
	which git-sh-setup
	case "$arg_command" in
		init)	if test -z "${arg_remoteurl:-}"  ; then
					git artifact -h
					echo "ERROR: --url <url> required for $arg_command"
					exit 1
				fi
				;;
		clone) 	if test -z "${arg_remoteurl:-}"  ; then
					git artifact -h
					echo "ERROR: --url <url> required for $arg_command"
					exit 1
				fi
				;;
		add-n-push)
				# shellcheck source=/dev/null
				. git-sh-setup
				require_work_tree
				if test -z "${arg_artifacttag:-}"  ; then
					git artifact -h
					echo "ERROR: -t|--tag <tag> required for $arg_command"
					exit 1
				fi
				;;
		*)		printf  "Unknown command: %s\n\n" "$arg_command"
				git artifact -h
				exit 1
				;;
	esac
	debug "command: {$arg_command}"
	debug "quiet: {$GIT_QUIET}"
	debug "opts: {$*}"
	debug

	set -euo pipefail

	"cmd_$arg_command" "$@"
}


main "$@"